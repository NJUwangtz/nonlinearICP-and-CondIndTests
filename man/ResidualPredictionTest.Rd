% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ResidualPredictionTest.R
\name{ResidualPredictionTest}
\alias{ResidualPredictionTest}
\title{Residual prediction test.}
\usage{
ResidualPredictionTest(Y, E, X, alpha = 0.05, verbose = FALSE,
  test = NULL, degree = 4, basis = c("nystrom", "nystrom_poly", "fourier",
  "polynomial", "provided")[1], resid_type = "OLS", XBasis = NULL,
  noiseMat = NULL, getnoiseFct = getNoiseStdNorm, argsGetNoiseFct = NULL,
  nSim = 100, funcOfRes = function(x) {     abs(x) }, useX = TRUE,
  returnXBasis = FALSE, nSub = ceiling(NROW(X)/4), ntree = 100,
  nodesize = 5, maxnodes = NULL, nSeqTests = 1, returnModel = FALSE)
}
\arguments{
\item{Y}{An n-dimensional vector.}

\item{E}{An n-dimensional vector or an nxq dimensional matrix or dataframe.}

\item{X}{A matrix or dataframe with n rows and p columns.}

\item{alpha}{Significance level. Defaults to 0.05.}

\item{verbose}{If \code{TRUE}, intermediate output is provided. Defaults to \code{FALSE}.}

\item{ntree}{Random forest parameter: Number of trees to grow. Defaults to 500.}

\item{nodesize}{Random forest parameter: Minimum size of terminal nodes. Defaults to 5.}

\item{maxnodes}{Random forest parameter: Maximum number of terminal nodes trees in the forest can have.
Defaults to NULL.}

\item{nSeqTests}{Bonferroni adjustment factor if previous tests where performed
(e.g. with subsamples).}
}
\value{
A list with the following entries:
\itemize{
 \item \code{pValue} The p value for the null hypothesis that Y and E are independent given X.
 \item \code{XBasis}
 \item \code{fctBasisExpansion}
 }
}
\description{
Tests the null hypothesis that Y and E are independent given X.
}
\examples{
n <- 1000
E <- rbinom(n, size = 1, prob = 0.2)
X <- 4 + 2 * E + rnorm(n)
Y <- 3 * (X)^2 + rnorm(n)
ResidualPredictionTest(Y, as.factor(E), X, basis = "polynomial")

E <- rbinom(n, size = 1, prob = 0.2)
X <- 4 + 2 * E + rnorm(n)
Y <- 3 * E + rnorm(n)
ResidualPredictionTest(Y, as.factor(E), X, basis = "polynomial")

n <- 1000
E <- rnorm(n)
X <- 4 + 2 * E + rnorm(n)
Y <- 3 * (X)^2 + rnorm(n)
ResidualPredictionTest(Y, E, X)
ResidualPredictionTest(Y, X, E)
}
